<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html>
<head>
    <meta name="Author" content="">
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="HandheldFriendly" content="true">
    <meta name="description" content="">
    <meta name="keywords" content="">
    <link rel="canonical" href="">
    <!--cssnav-->
    <link rel="shortcut icon" href="/favicon.ico" />
    <title>Pensando em nós</title>
    <style>
        html
        {
            overflow: hidden;
            -ms-touch-action: none;
            -ms-content-zooming: none;
        }
        body
        {
            margin: 0;
            padding: 0;
            background: #111;
            position: absolute;
            width: 100%;
            height: 100%;
        }
        #screen
        {
            position: absolute;
            width: 100%;
            height: 100%;
            overflow: hidden;
            -webkit-user-select: none;
            -moz-user-select: none;
            -ms-user-select: none;
            user-select: none;
            cursor: default;
        }
        #tree
        {
            display: none;
        }
        .search
        {
            background: #0065CB !important;
        }
    </style>
    <script src="../Style/ge1doot.js"></script>
    <script>


        "use strict";

        (function () {
            // ----- private vars -----
            var pointer, scr, svg,
		nodes = [],
		drag = {
		    X: 0,
		    Y: 0,
		    ox: 0,
		    oy: 0,
		    node: false,
		    ing: false
		},
		rotation = 0,
		nodeOver, setup;
            // ==== node constructor ====
            var Node = function (parent, label, col, link) {
                // ---- init variables ----
                this.link = link;
                this.col = col;
                this.pR = 0;
                this.len = 0;
                this.lex = 0;
                this.angle = 0;
                this.expanded = false;
                this.children = [];
                this.parent = parent;
                this.visible = false;
                this.x = 0;
                this.y = 0;
                this.ini = {
                    len: 0,
                    lex: 0,
                    angle: 0,
                    parent: parent
                }
                if (parent != "") {
                    // ---- push child ----
                    parent.children.push(this);
                    // ---- calculate lengths & angles ----
                    var a = (2 * Math.PI) / parent.children.length;
                    var b = (parent != "") ? Math.random() : 0;
                    for (var i in parent.children) {
                        var c = parent.children[i];
                        c.angle = c.ini.angle = Math.PI / 2 + a * i + b;
                        c.len = c.ini.len = c.parent.ini.len / setup.reduction;
                    }
                } else {
                    // ---- root ----
                    this.visible = true;
                    this.ini.len = setup.length * setup.reduction;
                }
                // ---- create line & text elements ----
                this.line = svg.createLine(1, setup.lineColor);
                this.text = svg.createText(label, setup.textFont, false, setup.defaultTextColor);
            }
            /* ==== create plot (separately > z-index) ==== */
            Node.prototype.createPlot = function () {
                this.pR = Math.round(Math.max(5, setup.dotSize * this.ini.len / 200));
                this.plot = svg.createOval(this.pR * 2, true);
                this.plot.strokeColor(setup.defaultNodeStrokeColor);
                this.plot.strokeWidth(1);
                this.plot.obj = this;
                // ---- font size ----
                this.text.fontSize(4 + this.pR);
            }
            /* ==== main animation ==== */
            Node.prototype.run = function () {
                if (this.visible) {
                    // ---- parent coordinates ----
                    var xp = this.parent ? this.parent.x : drag.X;
                    var yp = this.parent ? this.parent.y : drag.Y;
                    // ---- trigonometry ----
                    var a = Math.atan2(
				(this.y + Math.sin(this.angle + rotation) * setup.friction) - yp,
				(this.x + Math.cos(this.angle + rotation) * setup.friction) - xp
			);
                    if (this.lex < this.len) this.lex += (this.len - this.lex) * .1;
                    this.x = xp + Math.cos(a) * this.lex;
                    this.y = yp + Math.sin(a) * this.lex;
                    // ---- screen limits ----
                    if (this.x < this.pR) this.x = this.pR;
                    else if (this.x > scr.width - this.pR) this.x = scr.width - this.pR;
                    if (this.y < this.pR) this.y = this.pR;
                    else if (this.y > scr.height - this.pR) this.y = scr.height - this.pR;
                    // ---- move elements ----
                    this.line.move(this.x, this.y, xp, yp);
                    this.plot.move(this.x, this.y, this.pR);
                    this.text.move(this.x + this.pR + 5, this.y + this.pR * 0.25);
                }
            }
            /* ==== collapse node ==== */
            Node.prototype.collapse = function () {
                this.expanded = false;
                this.text.fillColor(setup.defaultTextColor);
                this.plot.fillColor((this.children.length) ? setup.collapsedNodeColor : this.col);
                for (var i = 0; i < this.children.length; i++) {
                    var c = this.children[i];
                    c.visible = false;
                    c.lex = 0;
                    c.line.move(-1, -1, -1, -2);
                    c.plot.move(-1000, -1, 0);
                    c.text.move(-1000, 0);
                    c.expanded = false;
                    c.collapse();
                }
            }
            /* ==== expand node ==== */
            Node.prototype.expand = function () {
                // ---- close all other branchs ----
                if (this.ini.parent != "") {
                    for (var i = 0; i < this.ini.parent.children.length; i++) {
                        this.ini.parent.children[i].collapse();
                    }
                }
                // ---- expand ----
                this.expanded = true;
                this.text.fillColor(setup.selectedTextColor);
                this.plot.fillColor(setup.expandedNodeColor);
                for (var i = 0; i < this.children.length; i++) {
                    this.children[i].visible = true;
                    this.children[i].lex = 0;
                }
            }
            /* ==== down ==== */
            Node.prototype.down = function () {
                if (pointer.isDraging) return;
                // ---- offset mouse ----
                drag.ox = pointer.X - this.x;
                drag.oy = pointer.Y - this.y;
                // ---- change root ----
                if (drag.node != this) {
                    // ---- expanded color ----
                    this.text.fillColor(setup.selectedTextColor);
                    this.plot.fillColor(setup.expandedNodeColor);
                    // ---- reset ----
                    var i = 0, node;
                    while (node = nodes[i++]) {
                        node.parent = node.ini.parent;
                        node.len = node.ini.len;
                        node.lex = node.ini.len;
                        node.angle = node.ini.angle;
                    }
                    // ---- search for root path ----
                    var oc = [];
                    var ow = this;
                    oc.push(ow);
                    while (ow.parent != "") {
                        ow = ow.parent;
                        oc.push(ow);
                    }
                    // ---- inverse vectors ----
                    for (var i = 1; i < oc.length; i++) {
                        oc[i].lex = oc[i - 1].ini.len;
                        oc[i].len = oc[i - 1].ini.len;
                        oc[i].angle = oc[i - 1].ini.angle - Math.PI;
                        oc[i].parent = oc[i - 1];
                    }
                    // ---- switch root ----
                    this.parent = "";
                    this.len = 0;
                    this.lex = 0;
                    this.angle = 0;
                    drag.node.plot.strokeColor(setup.defaultNodeStrokeColor);
                    drag.node.plot.strokeWidth(1);
                    drag.node = this;
                }
            }
            /* ==== main loop ==== */
            var run = function () {
                if (drag.ing) {
                    drag.X = pointer.X - drag.ox,
			drag.Y = pointer.Y - drag.oy;
                }
                rotation += setup.rotationSpeed;
                var i = 0, node;
                while (node = nodes[i++]) {
                    node.run();
                }
                // ---- loop ----
                requestAnimFrame(run);
            }
            /* ==== parse menu DOM ==== */
            var setMenuTree = function (theNode, parent) {
                if (theNode.tagName == "DIV" || theNode.tagName == "A") {
                    // ---- Node Label ----
                    var s = theNode.innerHTML;
                    var d = s.toUpperCase().indexOf("<DIV");
                    if (d > 0) s = s.substring(0, d);
                    d = s.toUpperCase().indexOf("<A");
                    if (d > 0) s = s.substring(0, d);
                    // ---- create Node ----
                    if (theNode.style.color != "") setup.defaultNodeColor = theNode.style.color;
                    parent = new Node(parent, s, setup.defaultNodeColor, theNode.href);
                    // ---- push Node ----
                    nodes.push(parent);
                }
                // ---- recursive call ----
                for (var i = 0; i < theNode.childNodes.length; i++) {
                    setMenuTree(theNode.childNodes[i], parent);
                }
            }
            // ----- initialization -----
            var init = function (s) {
                // ---- setup data ----
                setup = s;
                // ---- container ----
                scr = new ge1doot.Screen({
                    container: "screen"
                });
                scr.resize();
                pointer = new ge1doot.Pointer({
                    // ---- pointer down ----
                    down: function (e) {
                        if (e && e.target && e.target.obj) {
                            drag.ing = true;
                            e.target.obj.down();
                        }
                    },
                    up: function (e) {
                        drag.ing = false;
                    },
                    tap: function (e) {
                        if (e && e.target && e.target.obj) {
                            drag.ing = false;
                            if (drag.node.link) {
                                // ---- open hyperlink ----
                                window.open(drag.node.link, "_blank");
                            } else {
                                // ---- expand / collapse ----
                                if (drag.node.expanded) drag.node.collapse(); else drag.node.expand();
                            }
                        }
                    },
                    // ---- move pointer ----
                    move: function (e) {
                        if (e && e.target && e.target.obj) {
                            var o = e.target.obj;
                            if (nodeOver) {
                                nodeOver.plot.strokeColor(setup.defaultNodeStrokeColor);
                                nodeOver.plot.strokeWidth(1);
                            }
                            o.plot.strokeColor(setup.overNodeColor);
                            o.plot.strokeWidth(Math.round(Math.max(2, o.pR / 3)));
                            nodeOver = o;
                        }
                    }
                });
                /* ==== create SVG container ==== */
                svg = new ge1doot.SVGLib(scr.elem, true);
                if (svg) {
                    // ---- init menu ----
                    setup.length = scr.height / 4;
                    drag.X = scr.width / 2;
                    drag.Y = scr.height / 2;
                    setMenuTree(document.getElementById(setup.id), "");
                    // ---- create plots ----
                    var i = 0, node;
                    while (node = nodes[i++]) {
                        node.createPlot();
                    }
                    // ---- expand 1st Node ----
                    drag.node = nodes[0];
                    nodes[0].collapse();
                    nodes[0].expand();
                    // ---- start engine ----
                    run();
                }
            }
            return {
                // ---- launch script -----
                load: function (setup) {
                    window.addEventListener('load', function () {
                        ge1doot.loadJS(
					"../Style/svg.js",
					init, setup
				);
                    }, false);
                }
            }
        })().load({
            id: "tree",
            friction: 3,
            length: 200,
            reduction: 1.33,
            dotSize: 20,
            rotationSpeed: 0.002,
            collapsedNodeColor: "#fff",
            defaultNodeColor: "#f00",
            expandedNodeColor: "#666",
            lineColor: "#ccc",
            defaultNodeStrokeColor: "#000",
            overNodeColor: "#f00",
            defaultTextColor: "#666",
            selectedTextColor: "#fff",
            textFont: "tempus sans itc,Verdana, Helvetica, sans-serif"
        });
    </script>
</head>
<body>
    <div id="screen">
    </div>
    <div id="tree" style="color: #f00">
        Sandrelise, quando penso
        <div style="color: #ff3322">
            em você
            <div style="color: #ff3322">
                sinto <a>o calor da paixão.</a> <a>o significado do amor verdadeiro.</a> <a>a poesia
                    do nascer do sol.</a>
            </div>
            <div style="color: #ff3322">
                quero <a>te ter ao meu lado todo dia.</a> <a>estar em um lugar onde só você está.</a>
                <a>ser uma pessoa melhor na beleza de cada dia com você.</a>
            </div>
            <div style="color: #ff3322">
                não <a>preciso mais pensar em nada porque você completa as minhas ideias.</a> <a>existe
                    nada mais belo do que sua imagem ao brilho do sol.</a> <a>há coisa que quero mais que
                        estar ao seu lado.</a>
            </div>
        </div>
        <div style="color: #f80">
            em mim
            <div>
                antes de você <a>vejo alguém sem sentido.</a> <a>lembro de um talvez sem motivo.</a>
                <a>tenho cinza em meu pincel.</a>
            </div>
            <div>
                neste momento <a>sinto seus olhos sobre essas palavras.</a> <a>consigo ver a cor do
                    seu cheiro.</a> <a>desenho a vibração do seu peito.</a>
            </div>
            <div>
                no futuro <a>tenho a certeza da felicidade ao seu lado.</a> <a>me vejo percorrendo os
                    campos mais seguros do nosso amor.</a> <a>sou sua espada, seu escudo e nossa coragem.</a>
            </div>
        </div>
        <div style="color: #0f0">
            em nós
            <div>
                entendo <a>que amor verdadeiro é o que se constrói dia a dia.</a> <a>o sentido da palavra
                    cumplicidade.</a> <a>o alto valor das coisas mais banais.</a>
            </div>
            <div>
                lembro <a>das tantas risadas já dadas ao tempo.</a> <a>das dificuldades já superadas.</a>
                <a>das aventuras já experimentadas.</a>
            </div>
            <div>
                desejo <a>te dar mais carinho em troca de um simples olhar.</a> <a>ter mais paciência
                    em troca de abraço apertado.</a> <a>ser o melhor marido do mundo em troca da sua real
                        e pura felicidade.</a>
            </div>
        </div>
        <div style="color: #0f0">
            clique aqui por último
            <div>
                porque se ao final nenhuma bolinha foi capaz
                <div>
                    de me ajudar a expressar em palavras
                    <div>
                        os meus pensamentos por nós dois, clique aqui no plano B<a href="/casado/index.html">PLANO B</a>.
                    </div>
                </div>
            </div>
        </div>
</body>
</html>
